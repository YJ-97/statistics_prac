ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_gray()
?theme_gray
??theme_gray
library(ggplot2)
library(car)
str(Salaries)
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_gray()
?theme_gray
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_bw()
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_light()
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_dark()
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary")
?theme()
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue")))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"),
panel.grid.major.y =element_line(color="gray", linetype="solid"),
panel.grid.minor.y =element_line(color="gray", linetype="dashed"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"),
panel.grid.major.y =element_line(color="gray", linetype="solid"),
panel.grid.minor.y =element_line(color="gray", linetype="dashed"),
legend.position = "top")
mytheme <- theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"),
panel.grid.major.y =element_line(color="gray", linetype="solid"),
panel.grid.minor.y =element_line(color="gray", linetype="dashed"),
legend.position = "top")
library(lattice)
ggplot(singer, aes(x=voice.part, y=height)) +
geom_boxplot()
ggplot(singer, aes(x=voice.part, y=height)) +
geom_boxplot() +
labs(title="Height by voice part",
x="Voice Part", y="Height")
ggplot(singer, aes(x=voice.part, y=height)) +
geom_boxplot() +
labs(title="Height by voice part",
x="Voice Part", y="Height") +
mytheme
library(ggplot2)
library(car)
str(Salaries)
ggplot(Salaries, aes(x-rank)) +
geom_bar(fill="steelblue")
ggplot(Salaries, aes(x=rank)) +
geom_bar(fill="steelblue")
install.packages("gridExtra")
library(gridExtra)
ggplot(Salaries, aes(x=rank)) +
geom_bar(fill="steelblue")
ggplot(Salaries, aes(x=rank)) +
geom_histogram(fill="maroon")
ggplot(Salaries, aes(x=salary)) +
geom_histogram(fill="maroon")
ggplot(Salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(fill="orange")
ggplot(Salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(color="orange")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("gridExtra")
ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
library(ggplot2)
library(car)
ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
library(gridExtra)
grid.arrnage()
grid.arrange()
p1 <- ggplot(Salaries, aes(x=rank)) +
geom_bar(fill="steelblue")
p2 <- ggplot(Salaries, aes(x=salary)) +
geom_histogram(fill="maroon")
p3 <- ggplot(Salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(color="orange")
p4 <- ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
grid.arrange(p1, p2, p3, p4, nrow=2, ncol=2)
myggplot <- grid.arrange(p1, p2, p3, p4, nrow=2, ncol=2)
?ggsave
ggsave(file="myplot.png", plot=myggplot,
width=7.0, height=5.5)
getwd()
setwd(D:\R)
setwd(D\R)
setwd(D\\R)
setwd("D:\R")
setwd("D:/ubion/statistics_prac/dataset")
### Table 형태의 데이터 읽어오기
smart <- read.table('./dataset/smart.txt', header=T)
setwd("D:/ubion/statistics_prac")
### Table 형태의 데이터 읽어오기
smart <- read.table('./dataset/smart.txt', header=T)
### Table 형태의 데이터 읽어오기
smart <- read.table('./dataset/smart.txt', header=T)
### Table 형태의 데이터 읽어오기
smart <- read.table('./dataset/smart.txt', header=T, encoding='utf-8')
### Table 형태의 데이터 읽어오기
smart <- read.table('./dataset/smart.txt', header=T, encoding='utf-8')
### Table 형태의 데이터 읽어오기
smart <- read.table('./dataset/smart.csv', header=T, encoding='utf-8')
smart <_ read.csv('smart.csv')
smart <_ read.csv('./dataset/smart.csv')
smart <- read.csv('./dataset/smart.csv')
smart <- read.csv('./dataset/smart.csv', fileEncoding = "CP949", encoding = "UTF-8")
### Table 형태의 데이터 읽어오기
smart <- read.table('./dataset/smart.csv', header=T, fileEncoding = "CP949", encoding = "UTF-8")
head(smrat)
head(smart)
tail(smart)
### csv 형태의 데이터 읽어오기
smart <- read.csv('./dataset/smart.csv', fileEncoding = "CP949", encoding = "UTF-8")
head(smart)
tail(smart)
### 분할표
smart(table)
### 분할표
table(smart)
# 1
smarttable <- table(smart$gender, smart$model)
smarttable
# 2
with(smart, table(gender, model))
View(smart)
# 3
attach(smart)
table(gender, model)
detach(smart)
### 분할표
table(gender, smart)
### 분할표
table(gender, model)
margin.table(smarttable, 1)
margin.table(smrattable, 2)
margin.table(smarttable, 2)
margin.table(smarttable, 2) ## column
prop.table(smarttable)
prop.table(smarttable)
prop.table(smarttable, 1)
prop.table(smarttable, 2)
smart.prop <- round(100*prop.table(smarttable, 1), 1)
smart.prop
# 원도표
par(mfrow=c(1,2))
pie(smart.prop[1,], main='남자')
pie(smart.prop[2,], main='남자')
pie(smart.prop[2,], main='여여자')
# 원도표
par(mfrow=c(1,2)) # c(행, 열)
pie(smart.prop[1,], main='남자')
pie(smart.prop[2,], main='여자')
### 3차원 분할표
titanic <- read.csv('./dataset/titanic.csv')
### 3차원 분할표
titanic <- read.csv('./dataset/titanic.csv', fileEncoding = "CP949", encoding = "UTF-8")
head(titanic)
tail(titanic)
ttn.table <- with(titanic, table(Class, Survived, Group))
ftable(ttn.table)
table3way <- ftable(ttn.table, row.vars='Class', col.vars=c('Group', 'Survived'))
ttn.ftable <- data.frame(table3way)
ttn.survive <- ttn.ftable[ttn.ftable$Survived=='Yes',]
ttn.survive
round(100*survive/total, 1)
# 등실별생존율
survive <- with(ttn.survive, tappply(Freq, Class, sum))
survive
# 등실별생존율
survive <- with(ttn.survive, tapply(Freq, Class, sum))
survive
total <- with(ttn.ftable, tapply(Freq, Class, sum))
total
round(100*survive/total, 1)
id <- 1:12
ttn.survive$Rate <- round(100*ttn.survive$Freq/(ttn.ftable$Freq[id]+ttn.ftable$Freq[id+12]), 1)
ttn.survive
par(mfrow=c(1,1))
ttnbar <- matrix(ttn.survive$Rate, 4, 3)
ttnbar
row.names(ttnbar) <- c('1등급', '2등급', '3등급', '승무원원')
row.names(ttnbar) <- c('1등급', '2등급', '3등급', '승무원')
colnames(ttnbar) <- c('남자', '어린이', '여자')
barplot(ttnbar, beside=TRUE, legend=rownames(ttnbar), ylim=c(0, 100))
abline(h=c(20, 40, 60, 80, 100), lyt=3)
abline(h=0)
# beside=TRUE 일경우 막대들을 옆으로 표시
barplot(ttnbar, beside=TRUE, legend=rownames(ttnbar), ylim=c(0, 100))
abline(h=c(20, 40, 60, 80, 100), lty=3)
abline(h=0)
with(election, by(득표율, 정당, summary))
### 지방선거 득표율
election <- read.csv('election.csv')
with(election, by(득표율, 정당, summary))
### 지방선거 득표율
election <- read.csv('election.csv', fileEncoding = "CP949", encoding = "UTF-8")
with(election, by(득표율, 정당, summary))
### 지방선거 득표율
election <- read.csv('./dataset/election.csv', fileEncoding = "CP949", encoding = "UTF-8")
with(election, by(득표율, 정당, summary))
shortsummary <- function(x){
result <- round(c(length(x), mean(x), sd(x), min(x), max(x)), 2)
names(result) <- c("N", "평균", "표준편차", "최솟값", "최댓값")
return(result)
}
with(election, by(득표율, 정당, shortsummary))
boxplot(득표율~정당, data=election)
boxplot(득표율~정당, data=election, horizontal=T)
### Olympic 육상 100m 우승기록
Olympic <- read.csv('./dataset/100m.csv', fileEncoding = "CP949", encoding = "UTF-8")
head(Olympic)
tail(Olympic)
### Olympic 육상 100m 우승기록
olympic <- read.csv('./dataset/100m.csv', fileEncoding = "CP949", encoding = "UTF-8")
head(olympic)
tail(olympic)
with(olympic, plot(year, record))
male <- subset(olympic, gender=='M')
femail <- subset(olympic, gender=='F')
with(male, plot(year, record, ylim=c(9, 13), cex=1.2))
with(female, points(year, record, pch=16, cex=1.2))
female <- subset(olympic, gender=='F')
with(male, plot(year, record, ylim=c(9, 13), cex=1.2))
with(female, points(year, record, pch=16, cex=1.2))
n <- nrow(male)
legend(2000, 13, legend=c('남자', '여자'), pch=c(1, 16), bty='n', cex=1.2)
sxy <- sum(male$year*male$record)-sum(male$year)*sum(male$record)
sxy/(n-1)
sxy <- sum(male$year*male$record)-sum(male$year)*sum(male$record)/n
sxy/(n-1)
sxx <- sum(male$year^2)-sum(male$year)^2/n
syy <- sum(male$record^2)-sum(male$record)^2/n
sxy/sqrt(sxx*sxy)
sxx
syy
sxy/sqrt(sxx*syy)
with(male, cov(year, record)) # 상관계수수
with(male, cor(year, record)) # 상관계수
birth <- scan()
# ts 는 timeseries
birth <- ts(birth, start=c(2010, 1), frequency=12)
birth
plot(birth, xlab='년월', ylab='출생아수', type='o')
abline(h=c(1100, 1300, 1500), lty=3)
titanic <- read.csv('./dataset/titanic.csv', fileEncoding = "CP949", encoding = "UTF-8")
head(titanic)
tail(titanic)
ttn.table <- with(titanic, table(Class, Survived, Group))
ttn.table
titanic <- read.csv('./dataset/titanic.csv', fileEncoding = "CP949", encoding = "UTF-8")
head(titanic)
tail(titanic)
ttn.table <- with(titanic, table(Class, Survived, Group))
ttn.table
# 3차원 이상의 교차표에 사용
ftable(ttn.table)
table3way <- ftable(ttn.table, row.vars='Class', col.vars=c('Group', 'Survived'))
ttn.ftable <- data.frame(table3way)
ttn.dead <- ttn.ftable[ttn.ftable$Survived=='No',]
ttn.dead
# 등실별사망률
# tapply(대상변수, 그룹변수, 함수)
dead <- with(ttn.dead, tapply(Freq, Class, sum))
dead
total <- with(ttn.ftable, tapply(Freq, Class, sum))
total
round(100*dead/total, 1)
id <- 1:12
ttn.dead$Rate <- round(100*ttn.dead$Freq/(ttn.ftable$Freq[id]+ttn.ftable$Freq[id+12]), 1)
ttn.dead
par(mfrow=c(1,1))
ttnbar <- matrix(ttn.dead$Rate, 4, 3)
ttnbar
row.names(ttnbar) <- c('1등급', '2등급', '3등급', '승무원')
colnames(ttnbar) <- c('남자', '어린이', '여자')
# beside=TRUE 일경우 막대들을 옆으로 표시
barplot(ttnbar, beside=TRUE, legend=rownames(ttnbar), ylim=c(0, 100))
abline(h=c(20, 40, 60, 80, 100), lty=3)
olympic <- read.csv('./dataset/100m.csv', fileEncoding = "CP949", encoding = "UTF-8")
head(olympic)
tail(olympic)
with(olympic, plot(year, record))
female <- subset(olympic, gender=='F')
with(female, cov(year, record)) # 공분산
with(female, cor(year, record)) # 상관계수
smart
smart <- read.csv('./dataset/smart.csv', fileEncoding = "CP949", encoding = "UTF-8")
smart
smarttable <- table(smart)
smarttable
smart.prop <- prop.table(smart, 1)
smart.prop
smart.prop <- prop.table(smarttable, 1)
smart.prop
smart.prop <- prop.table(smarttable, 2)
smart.prop
smart.prop <- smart.prop*100
smart.prop
smart.prop <- round(smart.prop*100, 2)
smart.prop
smart.prop <- prop.table(smarttable, 2)
smart.prop <- round(smart.prop*100, 2)
smart.prop
# 원도표
par(mfrow=c(1, 3)) # c(행, 열)
pie(smart.prop[1,], main='모델 A')
pie(smart.prop[2,], main='모델 B')
pie(smart.prop[2,], main='모델 C')
# 원도표
par(mfrow=c(1, 3)) # c(행, 열)
pie(smart.prop[,1], main='모델 A')
pie(smart.prop[,2], main='모델 B')
pie(smart.prop[,3], main='모델 C')
n <- 10
k <- 3
factorial(k)
# 순열
factorial(n)/factorial(n-k)
factorial(1000)
prod(n:(n-k+1))
# 중복순열
n^k
# 조합
choose(n, k)
# 중복조합
choose(n+k-1, k)
prod(n:(n-k+1))
nomembers <- c(5, 10, 20, 30, 40, 50)
### Birthday Problem
n <- 365
for (k in nomembers){
j <- 0:(k-1)
probs <- c(probs, prod(1-j/n))
}
probs <- NULL
for (k in nomembers){
j <- 0:(k-1)
probs <- c(probs, prod(1-j/n))
}
probs <- round(probs, 4)
names(probs) <- nomembers
probs
daily <- scan()
monthday <- c(31,28,31,30,31,30,31,31,30,31,30,31)
births <- rep(daily, monthday)
births
length(births)
birthprop <- births/sum(births)
birthprob <- births/sum(births)
birthprob
# k=50일 떄 표본
k <- 50
x <- sample.int(n, k, replace=T, prob=birthprob)
result <- length(unique(x))==k
result
result <- length(unique(x))==k)
result
result <- length(unique(x))==k
result
x
length(unique(x))
result <- result + (length(unique(x)) == k)
for (i in 1:nosim){
x <- sample.int(n, k, replace=T, prob=birthprob)
result <- result + (length(unique(x)) == k)
}
# k=50일 때 10000개 표본
nosim <- 10000
result <- 0
for (i in 1:nosim){
x <- sample.int(n, k, replace=T, prob=birthprob)
result <- result + (length(unique(x)) == k)
}
result
cat('# of 생일이 모두 다른 경우:', result, "\n")
cat('생일이 모두 다를 확률:', reulst/nosim, '\n')
cat('생일이 모두 다를 확률:', result/nosim, '\n')
for (k in nomembers){
result <- 0
for (i in 1:nosim){
x <- sample.int(n, k, replace=T, prob=birthprob)
result <- result + (length(unique(x)) == k)
}
}
result
for (k in nomembers){
result <- 0
''
for (i in 1:nosim){
x <- sample.int(n, k, replace=T, prob=birthprob)
result <- result + (length(unique(x)) == k)
}
cat(k, '명 선택할 때\n ')
cat('# of 생일이 모두 다른 경우:', result, "\n")
cat('생일이 모두 다를 확률:', result/nosim, '\n')
}
z <- seq(-3, 3, by=0.01)
plot(z, dnorm(z), type='l', ylab='f(z)')
abline(h=0)
dnorm(0)
lines(c(-1, -1), c(0, 0.4))
lines(c(1.95, 1.95), c(0, 0.4))
lines(c(-1, 1.95), c(0.4, 0.4))
Area <- (1.95+1)*0.4
for (n in Nosim){
x <- runif(n,-1,1.95)
y <- runif(n,0,0.4)
fx <- dnorm(x)
ratio <- sum(y < fx)/n
cat("N =",n,"\t Ratio =",round(ratio,4),"\t Prob =",round(ratio*Area,4),"\n")
}
Nosim <- c(500, 1000, 5000, 10000, 50000)
for (n in Nosim){
x <- runif(n,-1,1.95)
y <- runif(n,0,0.4)
fx <- dnorm(x)
ratio <- sum(y < fx)/n
cat("N =",n,"\t Ratio =",round(ratio,4),"\t Prob =",round(ratio*Area,4),"\n")
}
cat("True Probability:",round(pnorm(1.95)-pnorm(-1),4))
