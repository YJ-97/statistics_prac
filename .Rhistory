geom_bar() +
scale_fill_manual(values=c("tomato", "cornflowerblue"))
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank)) +
geom_point()
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank)) +
geom_point() +
scale_color_manual(values=c("tomato", "cornflowerblue"))
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank)) +
geom_point(size=2) +
scale_color_manual(values=c("orange", "violetred", "steelblue"))
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank)) +
geom_point(size=2) +
scale_color_brewer(palette="Accent")
?RColorBrewer
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank)) +
geom_point(size=2) +
scale_color_brewer(palette="Set1")
ggplot(mtcars, aes(x=wt, y=mpg, color=disp)) +
geom_point()
ggplot(mtcars, aes(x=wt, y=mpg, color=disp)) +
geom_point() +
scale_colo_gradient2()
ggplot(mtcars, aes(x=wt, y=mpg, color=disp)) +
geom_point() +
scale_color_gradient2()
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank)) +
geom_point(size=2)
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank, shape=rank)) +
geom_point(size=2) +
scale_x_discrete()
ggplot(Salaries, aes(x=yrs.since.phd , y=salary,
color=rank, shape=rank)) +
geom_point(size=2) +
scale_shape_manual(values=c(15,17,19))
library(ggplot2)
library(car)
str(Salaries)
ggplot(Salaries, aes(x=yrs.since.phdm y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex)
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex)
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_gray()
?theme_gray
??theme_gray
library(ggplot2)
library(car)
str(Salaries)
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_gray()
?theme_gray
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_bw()
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_light()
ggplot(Salaries, aes(x=yrs.since.phd, y=salary,
color=rank, shpae=rank)) +
geom_point() +
facet_grid(. ~ sex) +
theme_dark()
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary")
?theme()
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue")))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"),
panel.grid.major.y =element_line(color="gray", linetype="solid"),
panel.grid.minor.y =element_line(color="gray", linetype="dashed"))
ggplot(Salaries, aes(x=rank, y=salary, fill=sex)) +
geom_boxplot() +
labs(title="Salary by Rank and Sex",
x="Rank", y="Salary") +
theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"),
panel.grid.major.y =element_line(color="gray", linetype="solid"),
panel.grid.minor.y =element_line(color="gray", linetype="dashed"),
legend.position = "top")
mytheme <- theme(plot.title=element_text(face="bold.italic",
size=14, color="brown"),
axis.title=element_text(face="bold.italic",
size=10, color="tomato"),
axis.text=element_text(face="bold",
size=9, color="royalblue"),
panel.background=element_rect(fill="snow", color="darkblue"),
panel.grid.major.y =element_line(color="gray", linetype="solid"),
panel.grid.minor.y =element_line(color="gray", linetype="dashed"),
legend.position = "top")
library(lattice)
ggplot(singer, aes(x=voice.part, y=height)) +
geom_boxplot()
ggplot(singer, aes(x=voice.part, y=height)) +
geom_boxplot() +
labs(title="Height by voice part",
x="Voice Part", y="Height")
ggplot(singer, aes(x=voice.part, y=height)) +
geom_boxplot() +
labs(title="Height by voice part",
x="Voice Part", y="Height") +
mytheme
library(ggplot2)
library(car)
str(Salaries)
ggplot(Salaries, aes(x-rank)) +
geom_bar(fill="steelblue")
ggplot(Salaries, aes(x=rank)) +
geom_bar(fill="steelblue")
install.packages("gridExtra")
library(gridExtra)
ggplot(Salaries, aes(x=rank)) +
geom_bar(fill="steelblue")
ggplot(Salaries, aes(x=rank)) +
geom_histogram(fill="maroon")
ggplot(Salaries, aes(x=salary)) +
geom_histogram(fill="maroon")
ggplot(Salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(fill="orange")
ggplot(Salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(color="orange")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("gridExtra")
ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
library(ggplot2)
library(car)
ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
library(gridExtra)
grid.arrnage()
grid.arrange()
p1 <- ggplot(Salaries, aes(x=rank)) +
geom_bar(fill="steelblue")
p2 <- ggplot(Salaries, aes(x=salary)) +
geom_histogram(fill="maroon")
p3 <- ggplot(Salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(color="orange")
p4 <- ggplot(Salaries, aes(x=rank, y=salary)) +
geom_boxplot(fill="mistyrose")
grid.arrange(p1, p2, p3, p4, nrow=2, ncol=2)
myggplot <- grid.arrange(p1, p2, p3, p4, nrow=2, ncol=2)
?ggsave
ggsave(file="myplot.png", plot=myggplot,
width=7.0, height=5.5)
getwd()
setwd(D:\R)
setwd(D\R)
setwd(D\\R)
setwd("D:\R")
setwd("D:/ubion/statistics_prac")
Pie <- scan('pie.txt', what='character')
Pie <- scan('./dataset/pie.txt', what='character')
## 도수분포표
Sale <- table(Pie)
Sale
Pie
# 데이터 불러오기
Pie <- scan('./dataset/pie.txt', what='character', encoding='CP949')
Pie
Pie
## 도수분포표
Sale <- table(Pie)
Pie
# 데이터 불러오기
Pie <- scan('./dataset/pie.txt', what='character', encoding='UTF-8')
Pie
# 데이터 불러오기
Pie <- scan('./dataset/pie.txt', what='character', encoding='UTF-8')
Pie
# 데이터 불러오기
Pie <- scan('./dataset/pie.txt', what='character', encoding='UTF-8')
Pie
# 데이터 불러오기
Pie <- scan('./dataset/pie.txt', what='character', encoding='UTF-8')
Pie
## 도수분포표
Sale <- table(Pie)
Sale
Total <- sum(Sale)
Total
SaleProp <- 100*Sale/Total
SaleProp
SaleProp <- round(SaleProp, 1)
SaleProp
Pie.Freq <- cbind(Sale, SaleProp)
Pie.Freq
colnames(Pie.Freq) <- c('판매량', '판매비율')
Pie.Freq
## 원도표
pie(SaleProp)
names(SaleProp)
names(SaleProp) <- c('고구마(11.5%)', '딸기(22.2%)', '바나나(7.3%)',
'블루베리(20.1%)', '애플(25.2%)', '초코(13.7%)')
pie(SaleProp)
## 막대그래프
barplot(Sale, ylim=c(0, 60), space=0.5)
abline(h=0)
## 막대그래프
barplot(Sale, ylim=c(0, 60), space=0.5)
abline(h=0)
abline(h=c(20, 40, 60), lyt=3)
abline(h=c(20, 40, 60), lty=3)
## 막대그래프
# 막대그래프 지정 ylim은 y축 범위, space는 간격
barplot(Sale, ylim=c(0, 60), space=0.5)
# abline(h=0) 은 y축이 0인 수직선 생성
abline(h=0)
abline(h=c(20, 40, 60), lty=3)
## 취업률
# scan에 아무것도 없는 경우는 직접 입력
Job <- scan()
## 취업률
# scan에 아무것도 없는 경우는 직접 입력
Job <- scan()
## 취업률
# scan에 아무것도 없는 경우는 직접 입력
Job <- scan()
# R에서는 구간을 초과 ~ 이하로 설정 : (, ]
JobCut <- cut(Job, breaks = c(10, 40, 50, 60, 70, 80, 100))
JobCut
# right=FALSE는 [, )로 바뀜
JobCut <- cut(Job, breaks = c(10, 40, 50, 60, 70, 80, 100), right=FALSE)
JobCut
JobFreq <- table(JobCut)
JobFreq
JobProp <- round(JobFreq/sum(JobFreq), 3)
JobProp
CumJobProp <- cumsum(JobProp)
CumJobProp
Result = cbind(JobFreq, JobProp, CumJobProp)
Result
colnames(Result) <- c('학과수', '상대도수', '누적상대도수')
rownames <- c('10%이상~40%미만', '40%이상~50%미만', '50%이상~60%미만',
'60%이상~70%미만', '70%이상~80%미만', '80%이상~100%미만')
Result
rownames(Result) <- c('10%이상~40%미만', '40%이상~50%미만', '50%이상~60%미만',
'60%이상~70%미만', '70%이상~80%미만', '80%이상~100%미만')
Result
rownames(Result) <- c('10%이상~40%미만', '40%이상~50%미만', '50%이상~60%미만',
'60%이상~70%미만', '70%이상~80%미만', '80%이상~100%')
Result
## Histogram
hist(Job)
hist(JOb, freq(FALSE))
hist(Job, freq(FALSE))
# 히스토그램이 막대그래프와 다른 점은 전체 면적이 1이 되게, 그 높이를 밀도로 지정인데
# 특별하게 지정하지 않으면 빈도수로 표시 해준다
hist(Job, freq=FALSE=)
# 히스토그램이 막대그래프와 다른 점은 전체 면적이 1이 되게, 그 높이를 밀도로 지정인데
# 특별하게 지정하지 않으면 빈도수로 표시 해준다
hist(Job, freq=FALSE)
## Histogram
hist(Job)
# 히스토그램이 막대그래프와 다른 점은 전체 면적이 1이 되게, 그 높이를 밀도로 지정인데
# 특별하게 지정하지 않으면 빈도수로 표시 해준다
hist(Job, freq=FALSE)
hist(Job, breaks=c(10, 40, 50, 60, 70, 80, 100), right=FALSE,
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
## 줄기 잎 그림
stem(Job)
## 과제 1
# 'score.txt'의 자료를 불러오기(학점 자료)
# 도수분포표 만들기 : 도수, 상대도수, 누적상대도수 포함
# 막대그래프 그리기 : 상대도수 표시
score = scan('./dataset/score.txt', encoding='utf-8', character='what')
## 과제 1
# 'score.txt'의 자료를 불러오기(학점 자료)
# 도수분포표 만들기 : 도수, 상대도수, 누적상대도수 포함
# 막대그래프 그리기 : 상대도수 표시
score = scan('./dataset/score.txt', encoding='utf-8', what='character')
score
score_table = table(score)
score_table
score_total = sum(score_table)
score_total
score_prop = 100*score_table/score_total
score_prop
score_Freq = cbind(score_table, score_prop)
score_Freq
colnames(score_Freq) = c('도수', '상대도수')
score_cum = cumsum(score_prop)
score_cum
score_Freq = cbind(score_table, score_prop, score_cum)
colnames(score_Freq) = c('도수', '상대도수', '누적상대도수')
score_Freq
barplot(score_table)
abline(h=0)
barplot(score_prop)
barplot(score_table)
abline(h=0)
abline(h=c(5, 10, 15), lty=3)
barplot(score_table, ylim=c(0, 20), space=0.5)
abline(h=0)
abline(h=c(5, 10, 15), lty=3)
barplot(score_prop, ylim=c(0, 20), space=0.5)
abline(h=0)
abline(h=c(5, 10, 15), lty=3)
barplot(score_prop, ylim=c(0, 100), space=0.5)
barplot(score_prop, ylim=c(0, 40), space=0.5)
abline(h=0)
abline(h=c(5, 10, 15), lty=3)
barplot(score_prop, ylim=c(0, 30), space=0.5)
abline(h=0)
abline(h=c(5, 10, 15), lty=3)
## 과제 2
# 취업률 자료를 (,] 기준으로 변경
# 실습결과의 도수분포표와 히스토그램 비교
Job <- scan()
## 과제 2
# 취업률 자료를 (,] 기준으로 변경
# 실습결과의 도수분포표와 히스토그램 비교
Job <- scan()
Job
JobCut <- cut(Job, breaks = c(10, 40, 50, 60, 70, 80, 100))
JobCut
JobCut
Job_table = table(JobCut)
Job_table
Job_total = sum(Job_table)
Job_total
Job_prop = 100*Job_table/Job_total
Job_prop
Job_cum = cumsum(Job_prop)
Job_cum
# R에서는 구간을 초과 ~ 이하로 설정 : (, ]
# cut이라는 함수는 지정한 구간사이에 각 값들을 배정
JobCut <- cut(Job, breaks = c(10, 40, 50, 60, 70, 80, 100))
JobCut
# right=FALSE는 [, )로 바뀜
JobCut <- cut(Job, breaks = c(10, 40, 50, 60, 70, 80, 100), right=FALSE)
JobCut
JobFreq <- table(JobCut)
JobFreq
JobProp <- round(JobFreq/sum(JobFreq), 3)
JobProp
# cumsum은 누적상대도수 생성
CumJobProp <- cumsum(JobProp)
CumJobProp
Result = cbind(JobFreq, JobProp, CumJobProp)
Result
colnames(Result) <- c('학과수', '상대도수', '누적상대도수')
rownames(Result) <- c('10%이상~40%미만', '40%이상~50%미만', '50%이상~60%미만',
'60%이상~70%미만', '70%이상~80%미만', '80%이상~100%')
Result
## Histogram
hist(Job)
# 히스토그램이 막대그래프와 다른 점은 전체 면적이 1이 되게, 그 높이를 밀도로 지정인데
# 특별하게 지정하지 않으면 빈도수로 표시 해준다
hist(Job, freq=FALSE) # hist(Job, probability=TRUE) 이 경우는 확률로 나타내는 경우
hist(Job, breaks=c(10, 40, 50, 60, 70, 80, 100), right=FALSE,
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
hist(Job, breaks=c(10, 40, 50, 60, 70, 80, 100), right=FALSE,
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
## 과제 2
# 취업률 자료를 (,] 기준으로 변경
# 실습결과의 도수분포표와 히스토그램 비교
Job1 <- scan()
JobCut <- cut(Job1, breaks = c(10, 40, 50, 60, 70, 80, 100))
Job_table = table(JobCut)
Job_table
Job_total = sum(Job_table)
Job_total
Job_prop = 100*Job_table/Job_total
Job_prop
Job_cum = cumsum(Job_prop)
Job_cum
## 취업률
# scan에 아무것도 없는 경우는 직접 입력
Job <- scan()
# R에서는 구간을 초과 ~ 이하로 설정 : (, ]
# cut이라는 함수는 지정한 구간사이에 각 값들을 배정
JobCut <- cut(Job, breaks = c(10, 40, 50, 60, 70, 80, 100))
JobCut
# right=FALSE는 [, )로 바뀜
JobCut <- cut(Job, breaks = c(10, 40, 50, 60, 70, 80, 100), right=FALSE)
JobCut
JobFreq <- table(JobCut)
JobFreq
JobProp <- round(JobFreq/sum(JobFreq), 3)
JobProp
# cumsum은 누적상대도수 생성
CumJobProp <- cumsum(JobProp)
CumJobProp
Result = cbind(JobFreq, JobProp, CumJobProp)
Result
colnames(Result) <- c('학과수', '상대도수', '누적상대도수')
rownames(Result) <- c('10%이상~40%미만', '40%이상~50%미만', '50%이상~60%미만',
'60%이상~70%미만', '70%이상~80%미만', '80%이상~100%')
Result
## Histogram
hist(Job)
# 히스토그램이 막대그래프와 다른 점은 전체 면적이 1이 되게, 그 높이를 밀도로 지정인데
# 특별하게 지정하지 않으면 빈도수로 표시 해준다
hist(Job, freq=FALSE) # hist(Job, probability=TRUE) 이 경우는 확률로 나타내는 경우
hist(Job, breaks=c(10, 40, 50, 60, 70, 80, 100), right=FALSE,
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
hist(Job1, breaks=c(10, 40, 50, 60, 70, 80, 100), right=FALSE,
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
hist(Job, breaks=c(10, 40, 50, 60, 70, 80, 100), right=FALSE,
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
hist(Job1, breaks=c(10, 40, 50, 60, 70, 80, 100),
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
hist(Job, breaks=c(10, 40, 50, 60, 70, 80, 100), right=FALSE,
main='취업률 히스토그램', xlab='취업률', ylab='밀도')
Job_Freq = cbind(Job_table, Job_prop, Job_cum)
colnames(Job_Freq) <- c('학과수', '상대도수', '누적상대도수')
rownames(Job_Freq) <- c('10%이상~40%미만', '40%이상~50%미만', '50%이상~60%미만',
'60%이상~70%미만', '70%이상~80%미만', '80%이상~100%')
Job_Freq
Result
# 상대도수
score_prop = round(score_table/score_total, 3)
score_prop
# 누적 상대도수
score_cum = cumsum(score_prop)
score_cum
# 도수, 상대도수 ,누적상대도수 포함 테이블
score_Freq = cbind(score_table, score_prop, score_cum)
colnames(score_Freq) = c('도수', '상대도수', '누적상대도수')
Job_prop = round(Job_table/Job_total, 3)
Job_prop
Job_cum = cumsum(Job_prop)
Job_cum
Job_Freq = cbind(Job_table, Job_prop, Job_cum)
colnames(Job_Freq) <- c('학과수', '상대도수', '누적상대도수')
rownames(Job_Freq) <- c('10%이상~40%미만', '40%이상~50%미만', '50%이상~60%미만',
'60%이상~70%미만', '70%이상~80%미만', '80%이상~100%')
Job_Freq
Result
